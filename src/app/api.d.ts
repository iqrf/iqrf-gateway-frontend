/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkAutoNetworkRequest100 {
  /**
   * IQMESH Network management - AutoNetwork request.
   */
  mType: "iqmeshNetwork_AutoNetwork";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    req: {
      /**
       * TX power to use in discovery process.
       */
      discoveryTxPower?: number;
      /**
       * Run discovery before start.
       */
      discoveryBeforeStart?: boolean;
      /**
       * Skip discovery in each wave.
       */
      skipDiscoveryEachWave?: boolean;
      /**
       * Number of retries DPA transactions.
       */
      actionRetries?: number;
      overlappingNetworks?: {
        /**
         * Number of the networks to be built.
         */
        networks: number;
        /**
         * Network number that will be build.
         */
        network: number;
        [k: string]: any;
      };
      /**
       * Allows to add only nodes with specified HWPID to the network.
       */
      hwpidFiltering?: number[];
      stopConditions: {
        /**
         * Maximum number of waves.
         */
        waves?: number;
        /**
         * Number of nodes (existing + new) in the network.
         */
        networkSize?: number;
        /**
         * Number of new nodes bonded into the network.
         */
        newNetworkNodes?: number;
        /**
         * Number of consecutive waves, in which no new nodes were added into network.
         */
        emptyWaves: number;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkAutoNetworkResponse100 {
  /**
   * IQMESH Network management - AutoNetwork response.
   */
  mType: "iqmeshNetwork_AutoNetwork";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Returns following values, see its description.
     */
    rsp?: {
      /**
       * Wave number.
       */
      wave: number;
      /**
       * Wave state description notification.
       */
      waveState?: string;
      /**
       * Wave state description notification code.
       */
      waveStateCode?: number;
      /**
       * Number of nodes in the network.
       */
      nodesNr?: number;
      /**
       * Number of nodes newly added into the network in this wave.
       */
      newNodesNr?: number;
      /**
       * Returns nodes newly added into the network in this wave.
       */
      newNodes?: {
        /**
         * Module ID.
         */
        mid: string;
        /**
         * Assigned address.
         */
        address: number;
        [k: string]: any;
      }[];
      /**
       * Indication, if this is the last wave.
       */
      lastWave?: boolean;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkBondNodeLocalRequest100 {
  /**
   * IQMESH Network management - Bond Node Local request.
   */
  mType: "iqmeshNetwork_BondNodeLocal";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Number of repetitions of DPA messages.
     */
    repeat?: number;
    req: {
      /**
       * Address to bond the device to.
       */
      deviceAddr: number;
      /**
       * See IQRF OS User's and Reference guides (remote bonding, function bondNewNode).
       */
      bondingMask?: number;
      /**
       *  Maximum number of FRCs used to test whether the [N] was successfully bonded. If the [N] does not respond, it is unbonded at the Coordinator�s side. If the value is 0, then no test is performed. If the [N] is connected to and bonded from DSM then this testing never succeeds.
       */
      bondingTestRetries?: number;
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkBondNodeLocalResponse100 {
  /**
   * IQMESH Network management - Bond Node Local response.
   */
  mType: "iqmeshNetwork_BondNodeLocal";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Returns following values, see its description.
     */
    rsp?: {
      /**
       * Assigned address to the node.
       */
      assignedAddr: number;
      /**
       * Number of nodes in the network.
       */
      nodesNr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      /**
       * Manufacture name.
       */
      manufacturer?: string;
      /**
       * Product name.
       */
      product?: string;
      /**
       * Supported standards by the device.
       */
      standards?: string[];
      /**
       * Returns Embedded peripheral OS - Read response.
       */
      osRead?: {
        /**
         * TR Module ID.
         */
        mid: string;
        /**
         * IQRF OS version.
         */
        osVersion: string;
        /**
         * See DPA guide.
         */
        trMcuType: {
          /**
           * TR&McuType value.
           */
          value?: number;
          /**
           * TR module type.
           */
          trType?: string;
          /**
           * TR module is FCC certified.
           */
          fccCertified?: boolean;
          /**
           * TR module MCU type.
           */
          mcuType?: string;
          [k: string]: any;
        };
        /**
         * IQRF OS build.
         */
        osBuild: string;
        /**
         * See lastRSSI at IQRF OS Reference Guide.
         */
        rssi: string;
        /**
         * Module supply voltage
         */
        supplyVoltage: string;
        /**
         * See DPA guide.
         */
        flags: {
          /**
           * Flags value.
           */
          value?: number;
          /**
           * Flags.0 - Insufficient OsBuild.
           */
          insufficientOsBuild?: boolean;
          /**
           * Flags.1 - Interface type.
           */
          interface?: string;
          /**
           * Flags.2 - Custom DPA handler was detected.
           */
          dpaHandlerDetected?: boolean;
          /**
           * Flags.3 - Custom DPA Handler is not detected but enabled.
           */
          dpaHandlerNotDetectedButEnabled?: boolean;
          /**
           * Flags.4 - No interface supported.
           */
          noInterfaceSupported?: boolean;
          [k: string]: any;
        };
        /**
         * See DPA guide.
         */
        slotLimits: {
          /**
           * Slot limits value.
           */
          value?: number;
          /**
           * Shortest timeslot length in 10 ms units.
           */
          shortestTimeslot?: string;
          /**
           * Longets timeslot length in 10 ms units.
           */
          longestTimeslot?: string;
          [k: string]: any;
        };
        /**
         * Individual Bonding Key.
         */
        ibk?: number[];
        /**
         * DPA version.
         */
        dpaVer?: string;
        /**
         * Number of all non-embedded peripherals implemented by Custom DPA Handler.
         */
        perNr?: number;
        /**
         * Bits array (starting from LSb of the 1st byte) specifying which of 32 embedded peripherals are enabled in the HWP Configuration.
         */
        embPers?: number[];
        /**
         * Hardware profile identification.
         */
        hwpId?: number;
        /**
         * Hardware profile version.
         */
        hwpIdVer?: number;
        /**
         * Various flags.
         */
        enumFlags?: {
          value?: number;
          rfModeStd?: boolean;
          rfModeLp?: boolean;
          stdAndLpNetwork?: boolean;
          [k: string]: any;
        };
        /**
         * Bits array (starting from LSb of the 1st byte) specifying which of non-embedded peripherals are implemented.
         */
        userPers?: number[];
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkEnumerateDeviceRequest100 {
  /**
   * IQMESH Network management - Enumerate Device request.
   */
  mType: "iqmeshNetwork_EnumerateDevice";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Number of repetitions of DPA messages.
     */
    repeat?: number;
    req: {
      /**
       * Device address to enumerate.
       */
      deviceAddr: number;
      /**
       * If to get more peripherals information.
       */
      morePeripheralsInfo?: boolean;
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkEnumerateDeviceResponse100 {
  /**
   * IQMESH Network management - Enumerate Device response.
   */
  mType: "iqmeshNetwork_EnumerateDevice";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Returns following values, see its description.
     */
    rsp?: {
      /**
       * Device address to enumerate.
       */
      deviceAddr: number;
      /**
       * Manufacture name.
       */
      manufacturer?: string;
      /**
       * Product name.
       */
      product?: string;
      /**
       * Supported standards by the device.
       */
      standards?: string[];
      /**
       * First response.
       */
      discovery?: {
        /**
         * Device is discovered.
         */
        discovered: boolean;
        /**
         * Device VRN integer.
         */
        vrn: number;
        /**
         * Device zone.
         */
        zone: number;
        /**
         * Device parent.
         */
        parent: number;
        [k: string]: any;
      };
      /**
       * Returns Embedded peripheral OS - Read response.
       */
      osRead?: {
        /**
         * TR Module ID.
         */
        mid: string;
        /**
         * IQRF OS version.
         */
        osVersion: string;
        /**
         * See DPA guide.
         */
        trMcuType?: {
          /**
           * TR&McuType value.
           */
          value?: number;
          /**
           * TR module type.
           */
          trType?: string;
          /**
           * TR module is FCC certified.
           */
          fccCertified?: boolean;
          /**
           * TR module MCU type.
           */
          mcuType?: string;
          [k: string]: any;
        };
        /**
         * IQRF OS build.
         */
        osBuild: string;
        /**
         * See lastRSSI at IQRF OS Reference Guide.
         */
        rssi?: string;
        /**
         * Module supply voltage
         */
        supplyVoltage?: string;
        /**
         * See DPA guide.
         */
        flags?: {
          /**
           * Flags value.
           */
          value?: number;
          /**
           * Flags.0 - Insufficient OsBuild.
           */
          insufficientOsBuild?: boolean;
          /**
           * Flags.1 - Interface type.
           */
          interface?: string;
          /**
           * Flags.2 - Custom DPA handler was detected.
           */
          dpaHandlerDetected?: boolean;
          /**
           * Flags.3 - Custom DPA Handler is not detected but enabled.
           */
          dpaHandlerNotDetectedButEnabled?: boolean;
          /**
           * Flags.4 - No interface supported.
           */
          noInterfaceSupported?: boolean;
          [k: string]: any;
        };
        /**
         * See DPA guide.
         */
        slotLimits?: {
          /**
           * Slot limits value.
           */
          value?: number;
          /**
           * Shortest timeslot length in 10 ms units.
           */
          shortestTimeslot?: string;
          /**
           * Longets timeslot length in 10 ms units.
           */
          longestTimeslot?: string;
          [k: string]: any;
        };
        [k: string]: any;
      };
      /**
       * Reduced or full eperExploreEnum.
       */
      peripheralEnumeration?: {
        /**
         * DPA version.
         */
        dpaVer: string;
        /**
         * Number of all non-embedded peripherals implemented by Custom DPA Handler.
         */
        perNr?: number;
        /**
         * Bits array (starting from LSb of the 1st byte) specifying which of 32 embedded peripherals are enabled in the HWP Configuration.
         */
        embPers?: number[];
        /**
         * Hardware profile identification.
         */
        hwpId: number;
        /**
         * Hardware profile version.
         */
        hwpIdVer: number;
        /**
         * Various flags.
         */
        flags?: {
          value?: number;
          rfModeStd?: boolean;
          rfModeLp?: boolean;
          stdAndLpNetwork?: boolean;
          [k: string]: any;
        };
        /**
         * Bits array (starting from LSb of the 1st byte) specifying which of non-embedded peripherals are implemented.
         */
        userPers?: number[];
        [k: string]: any;
      };
      /**
       * Reduced or full eperOsReadCfg.
       */
      trConfiguration?: {
        /**
         * Embedded peripherals enabled on the node.
         */
        embPeripherals?: {
          /**
           * An array of 32 bits. Each bit enables/disables one of the embedded 32 predefined peripherals.
           */
          values?: number[];
          /**
           * If coordinator is enabled.
           */
          coordinator?: boolean;
          /**
           * If node is enabled.
           */
          node?: boolean;
          /**
           * If OS is enabled.
           */
          os?: boolean;
          /**
           * If EEPROM is enabled.
           */
          eeprom?: boolean;
          /**
           * If EEEPROM is enabled.
           */
          eeeprom?: boolean;
          /**
           * If RAM is enabled.
           */
          ram?: boolean;
          /**
           * If LEDR is enabled.
           */
          ledr?: boolean;
          /**
           * If LEDG is enabled.
           */
          ledg?: boolean;
          /**
           * If SPI is enabled.
           */
          spi?: boolean;
          /**
           * If IO is enabled.
           */
          io?: boolean;
          /**
           * If thermometer is enabled.
           */
          thermometer?: boolean;
          /**
           * If PWM is enabled.
           */
          pwm?: boolean;
          /**
           * If UART is enabled.
           */
          uart?: boolean;
          /**
           * If FRC is enabled.
           */
          frc?: boolean;
          [k: string]: any;
        };
        /**
         * Used RF band.
         */
        rfBand?: string;
        /**
         * Main RF channel A of the main network. Valid numbers depend on used RF band.
         */
        rfChannelA?: number;
        /**
         * Same as above but second B channel. Used at RFPGM only.
         */
        rfChannelB?: number;
        /**
         * Main RF channel A of the optional subordinate network in case the node also plays a role of the coordinator of such network. Valid numbers depend on used RF band. Available for DPA<400.
         */
        rfSubChannelA?: number;
        /**
         * Same as above but second B channel.
         */
        rfSubChannelB?: number;
        /**
         * RF output power. Valid numbers 0-7.
         */
        txPower?: number;
        /**
         * RF signal filter. Valid numbers 0-64.
         */
        rxFilter?: number;
        /**
         * Timeout for receiving RF packets at LP mode at N device.
         */
        lpRxTimeout?: number;
        /**
         * A nonzero value specifies an alternative DPA service mode channel.
         */
        rfAltDsmChannel?: number;
        /**
         * If sets, then activates RFPGM invoking by TR module reset.
         */
        rfPgmEnableAfterReset?: boolean;
        /**
         * If sets, then terminates RFPGM automatically ~1 minute after reset.
         */
        rfPgmTerminateAfter1Min?: boolean;
        /**
         * If sets, then terminates RFPGM by dedicated pin of the TR module.
         */
        rfPgmTerminateMcuPin?: boolean;
        /**
         * If sets, then enables single or dual channel function.
         */
        rfPgmDualChannel?: boolean;
        /**
         * RFPGM receiving mode setting. If set, then LP (low power) Rx mode is used during RFPGM. Otherwise STD (standard) Rx mode is used.
         */
        rfPgmLpMode?: boolean;
        /**
         * Read only. Indicates that the last RFPGM has successfully been completed.
         */
        rfPgmIncorrectUpload?: boolean;
        /**
         * If set, then a Custom DPA handler is called in case of an event.
         */
        customDpaHandler?: boolean;
        /**
         * If set, then DP2P is enabled at [N].
         */
        dpaPeerToPeer?: boolean;
        /**
         * If set, then Node device can be controlled by a SPI or UART interface. Valid only in DPA version < 4.00
         */
        nodeDpaInterface?: boolean;
        /**
         * Baud rate of the UART interface if one is used.
         */
        uartBaudrate?: number;
        /**
         * If set, then DPA Autoexec is run at a later stage of the module boot time.
         */
        dpaAutoexec?: boolean;
        /**
         * If set, then the Node device does not route packets on the background.
         */
        routingOff?: boolean;
        /**
         * If set, then DPA IO Setup is run at an early stage of the module boot time.
         */
        ioSetup?: boolean;
        /**
         * If set, then device receives also peer-to-peer (non-networking) packets and raises PeerToPeer event.
         */
        peerToPeer?: boolean;
        /**
         * If set, then unbonded Node using default IQRF buttons never sleeps during the button bonding. From DPA v3.03
         */
        neverSleep?: boolean;
        /**
         * If the bit is set, then the [C] controls the STD+LP network; otherwise, it controls the STD network. The bit can only be changed if the network is empty (no [Ns] are bonded) otherwise the network will stop working. From DPA v4.00
         */
        stdAndLpNetwork?: boolean;
        [k: string]: any;
      };
      /**
       * Returns the same information as Get peripheral information but for up to 14 peripherals of consecutive indexes starting with the specified PCMD.
       */
      morePeripheralsInfo?: {
        /**
         * Extended peripheral characteristic. See Extended Peripheral Characteristic constants.
         */
        perTe: number;
        /**
         * Peripheral type. If the peripheral is not supported or enabled, then PerTx = PERIPHERAL_TYPE_DUMMY. See Peripheral Types constants.
         */
        perT: number;
        /**
         * Optional peripheral specific information.
         */
        par1: number;
        /**
         * Optional peripheral specific information.
         */
        par2: number;
        [k: string]: any;
      }[];
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkOtaUploadRequest100 {
  /**
   * IQMESH Network management - Upload hex or iqrf file request.
   */
  mType: "iqmeshNetwork_OtaUpload";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Number of repetitions of DPA messages.
     */
    repeat?: number;
    req: {
      /**
       * Device address to write the hex or iqrf file.
       */
      deviceAddr: number;
      /**
       * Hardware profile ID of the devices to write the hex or iqrf file.
       */
      hwpId?: number;
      /**
       * Full name of file with source code to load.
       */
      fileName: string;
      /**
       * Start address on which will be the data saved into memory.
       */
      startMemAddr: number;
      /**
       * Loading action - WithoutCodeLoading, WithCodeLoading.
       */
      loadingAction: string;
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkOtaUploadResponse100 {
  /**
   * IQMESH Network management - Upload hex or iqrf file response.
   */
  mType: "iqmeshNetwork_OtaUpload";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Returns following values, see its description.
     */
    rsp?: {
      /**
       * Device address to load the code to. Broadcast address is also allowed.
       */
      deviceAddr: number;
      /**
       * Hardware profile ID of the devices to write the hex or iqrf file.
       */
      hwpId: number;
      /**
       * Loading action - WithoutCodeLoading, WithCodeLoading.
       */
      loadingAction: string;
      /**
       * If sets, then selected file has been successfully loaded.
       */
      uploadResult?: boolean;
      /**
       * Returns result of verify action.
       */
      verifyResult?: {
        /**
         * Device address.
         */
        address: number;
        /**
         * Result.
         */
        result: boolean;
        [k: string]: any;
      }[];
      /**
       * Returns result of verify action.
       */
      loadResult?: {
        /**
         * Device address.
         */
        address: number;
        /**
         * Result.
         */
        result: boolean;
        [k: string]: any;
      }[];
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkReadTrConfRequest100 {
  /**
   * IQMESH Network management - Read TR configuration request.
   */
  mType: "iqmeshNetwork_ReadTrConf";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Number of repetitions of DPA messages.
     */
    repeat?: number;
    req: {
      /**
       * Device address to read the configuration from.
       */
      deviceAddr: number;
      /**
       * HWP Id.
       */
      hwpId?: number;
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkReadTrConfResponse100 {
  /**
   * IQMESH Network management - Read TR configuration response.
   */
  mType: "iqmeshNetwork_ReadTrConf";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Returns following values, see its description.
     */
    rsp?: {
      /**
       * Device address to read the configuration from.
       */
      deviceAddr: number;
      /**
       * Embedded peripherals enabled on the node.
       */
      embPers?: {
        /**
         * An array of 32 bits. Each bit enables/disables one of the embedded 32 predefined peripherals.
         */
        values?: number[];
        /**
         * If coordinator is enabled.
         */
        coordinator?: boolean;
        /**
         * If node is enabled.
         */
        node?: boolean;
        /**
         * If OS is enabled.
         */
        os?: boolean;
        /**
         * If EEPROM is enabled.
         */
        eeprom?: boolean;
        /**
         * If EEEPROM is enabled.
         */
        eeeprom?: boolean;
        /**
         * If RAM is enabled.
         */
        ram?: boolean;
        /**
         * If LEDR is enabled.
         */
        ledr?: boolean;
        /**
         * If LEDG is enabled.
         */
        ledg?: boolean;
        /**
         * If SPI is enabled.
         */
        spi?: boolean;
        /**
         * If IO is enabled.
         */
        io?: boolean;
        /**
         * If thermometer is enabled.
         */
        thermometer?: boolean;
        /**
         * If PWM is enabled.
         */
        pwm?: boolean;
        /**
         * If UART is enabled.
         */
        uart?: boolean;
        /**
         * If FRC is enabled.
         */
        frc?: boolean;
        [k: string]: any;
      };
      /**
       * Used RF band.
       */
      rfBand?: string;
      /**
       * Main RF channel A of the main network. Valid numbers depend on used RF band.
       */
      rfChannelA?: number;
      /**
       * Same as above but second B channel. Used at RFPGM only.
       */
      rfChannelB?: number;
      /**
       * Main RF channel A of the optional subordinate network in case the node also plays a role of the coordinator of such network. Valid numbers depend on used RF band. Available for DPA<400.
       */
      rfSubChannelA?: number;
      /**
       * Same as above but second B channel.
       */
      rfSubChannelB?: number;
      /**
       * RF output power. Valid numbers 0-7.
       */
      txPower?: number;
      /**
       * RF signal filter. Valid numbers 0-64.
       */
      rxFilter?: number;
      /**
       * Timeout for receiving RF packets at LP mode at N device.
       */
      lpRxTimeout?: number;
      /**
       * A nonzero value specifies an alternative DPA service mode channel.
       */
      rfAltDsmChannel?: number;
      /**
       * If sets, then activates RFPGM invoking by TR module reset.
       */
      rfPgmEnableAfterReset?: boolean;
      /**
       * If sets, then terminates RFPGM automatically ~1 minute after reset.
       */
      rfPgmTerminateAfter1Min?: boolean;
      /**
       * If sets, then terminates RFPGM by dedicated pin of the TR module.
       */
      rfPgmTerminateMcuPin?: boolean;
      /**
       * If sets, then enables single or dual channel function.
       */
      rfPgmDualChannel?: boolean;
      /**
       * RFPGM receiving mode setting. If set, then LP (low power) Rx mode is used during RFPGM. Otherwise STD (standard) Rx mode is used.
       */
      rfPgmLpMode?: boolean;
      /**
       * Read only. Indicates that the last RFPGM has successfully been completed.
       */
      rfPgmIncorrectUpload?: boolean;
      /**
       * If set, then a Custom DPA handler is called in case of an event.
       */
      customDpaHandler?: boolean;
      /**
       * If set, then DP2P is enabled at [N].
       */
      dpaPeerToPeer?: boolean;
      /**
       * If set, then Node device can be controlled by a SPI or UART interface. Valid only in DPA version < 4.00
       */
      nodeDpaInterface?: boolean;
      /**
       * Baud rate of the UART interface if one is used.
       */
      uartBaudrate?: number;
      /**
       * If set, then DPA Autoexec is run at a later stage of the module boot time.
       */
      dpaAutoexec?: boolean;
      /**
       * If set, then the Node device does not route packets on the background.
       */
      routingOff?: boolean;
      /**
       * If set, then DPA IO Setup is run at an early stage of the module boot time.
       */
      ioSetup?: boolean;
      /**
       * If set, then device receives also peer-to-peer (non-networking) packets and raises PeerToPeer event.
       */
      peerToPeer?: boolean;
      /**
       * If set, then unbonded Node using default IQRF buttons never sleeps during the button bonding. From DPA v3.03
       */
      neverSleep?: boolean;
      /**
       * If the bit is set, then the [C] controls the STD+LP network; otherwise, it controls the STD network. The bit can only be changed if the network is empty (no [Ns] are bonded) otherwise the network will stop working. From DPA v4.00
       */
      stdAndLpNetwork?: boolean;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkRemoveBondRequest100 {
  /**
   * IQMESH Network management - remove bond.
   */
  mType: "iqmeshNetwork_RemoveBond";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Number of repetitions of DPA messages.
     */
    repeat?: number;
    req: {
      /**
       * Address to node to remove. In the case of 0xFF, all bonded nodes are removed.
       */
      deviceAddr: number;
      /**
       * HWP id.
       */
      hwpId?: number;
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkRemoveBondResponse100 {
  /**
   * IQMESH Network management - Remove bond response.
   */
  mType: "iqmeshNetwork_RemoveBond";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Returns following values, see its description.
     */
    rsp?: {
      /**
       * Number of bonded nodes in the network.
       */
      nodesNr: number;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkSmartConnectRequest100 {
  /**
   * IQMESH Network management - Smart Connect request.
   */
  mType: "iqmeshNetwork_SmartConnect";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Number of repetitions of DPA messages.
     */
    repeat?: number;
    req: {
      /**
       * Address to bond the device to.
       */
      deviceAddr: number;
      /**
       * Smart connect code of the device.
       */
      smartConnectCode: string;
      /**
       * Maximum number of FRCs used to test whether the Node was successfully bonded. If value is 0, then no test is performed and the command always succeeds.
       */
      bondingTestRetries?: number;
      /**
       * Optional data passed to the bonded node.
       */
      userData?: number[];
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkSmartConnectResponse100 {
  /**
   * IQMESH Network management - Smart connect response.
   */
  mType: "iqmeshNetwork_SmartConnect";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Returns following values, see its description.
     */
    rsp?: {
      /**
       * Assigned address to the node.
       */
      assignedAddr: number;
      /**
       * Number of nodes in the network.
       */
      nodesNr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      /**
       * Manufacture name.
       */
      manufacturer?: string;
      /**
       * Product name.
       */
      product?: string;
      /**
       * Supported standards by the device.
       */
      standards?: string[];
      /**
       * Returns Embedded peripheral OS - Read response.
       */
      osRead?: {
        /**
         * TR Module ID.
         */
        mid: string;
        /**
         * IQRF OS version.
         */
        osVersion: string;
        /**
         * See DPA guide.
         */
        trMcuType: {
          /**
           * TR&McuType value.
           */
          value?: number;
          /**
           * TR module type.
           */
          trType?: string;
          /**
           * TR module is FCC certified.
           */
          fccCertified?: boolean;
          /**
           * TR module MCU type.
           */
          mcuType?: string;
          [k: string]: any;
        };
        /**
         * IQRF OS build.
         */
        osBuild: string;
        /**
         * See lastRSSI at IQRF OS Reference Guide.
         */
        rssi: string;
        /**
         * Module supply voltage
         */
        supplyVoltage: string;
        /**
         * See DPA guide.
         */
        flags: {
          /**
           * Flags value.
           */
          value?: number;
          /**
           * Flags.0 - Insufficient OsBuild.
           */
          insufficientOsBuild?: boolean;
          /**
           * Flags.1 - Interface type.
           */
          interface?: string;
          /**
           * Flags.2 - Custom DPA handler was detected.
           */
          dpaHandlerDetected?: boolean;
          /**
           * Flags.3 - Custom DPA Handler is not detected but enabled.
           */
          dpaHandlerNotDetectedButEnabled?: boolean;
          /**
           * Flags.4 - No interface supported.
           */
          noInterfaceSupported?: boolean;
          [k: string]: any;
        };
        /**
         * See DPA guide.
         */
        slotLimits: {
          /**
           * Slot limits value.
           */
          value?: number;
          /**
           * Shortest timeslot length in 10 ms units.
           */
          shortestTimeslot?: string;
          /**
           * Longets timeslot length in 10 ms units.
           */
          longestTimeslot?: string;
          [k: string]: any;
        };
        /**
         * Individual Bonding Key.
         */
        ibk?: number[];
        /**
         * DPA version.
         */
        dpaVer?: string;
        /**
         * Number of all non-embedded peripherals implemented by Custom DPA Handler.
         */
        perNr?: number;
        /**
         * Bits array (starting from LSb of the 1st byte) specifying which of 32 embedded peripherals are enabled in the HWP Configuration.
         */
        embPers?: number[];
        /**
         * Hardware profile identification.
         */
        hwpId?: number;
        /**
         * Hardware profile version.
         */
        hwpIdVer?: number;
        /**
         * Various flags.
         */
        enumFlags?: {
          value?: number;
          rfModeStd?: boolean;
          rfModeLp?: boolean;
          stdAndLpNetwork?: boolean;
          [k: string]: any;
        };
        /**
         * Bits array (starting from LSb of the 1st byte) specifying which of non-embedded peripherals are implemented.
         */
        userPers?: number[];
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkWriteTrConfRequest100 {
  /**
   * IQMESH Network management - Write TR configuration request.
   */
  mType: "iqmeshNetwork_WriteTrConf";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Number of repetitions of DPA messages.
     */
    repeat?: number;
    req: {
      /**
       * Device address to write the configuration to. Broadcast address is also allowed.
       */
      deviceAddr: number;
      /**
       * HWP Id.
       */
      hwpId?: number;
      /**
       * Embedded peripherals enabled on the node.
       */
      embPers?: {
        /**
         * An array of 32 bits. Each bit enables/disables one of the embedded 32 predefined peripherals.
         */
        values?: number[];
        /**
         * If coordinator is enabled.
         */
        coordinator?: boolean;
        /**
         * If node is enabled.
         */
        node?: boolean;
        /**
         * If OS is enabled.
         */
        os?: boolean;
        /**
         * If EEPROM is enabled.
         */
        eeprom?: boolean;
        /**
         * If EEEPROM is enabled.
         */
        eeeprom?: boolean;
        /**
         * If RAM is enabled.
         */
        ram?: boolean;
        /**
         * If LEDR is enabled.
         */
        ledr?: boolean;
        /**
         * If LEDG is enabled.
         */
        ledg?: boolean;
        /**
         * If SPI is enabled.
         */
        spi?: boolean;
        /**
         * If IO is enabled.
         */
        io?: boolean;
        /**
         * If thermometer is enabled.
         */
        thermometer?: boolean;
        /**
         * If PWM is enabled.
         */
        pwm?: boolean;
        /**
         * If UART is enabled.
         */
        uart?: boolean;
        /**
         * If FRC is enabled.
         */
        frc?: boolean;
      };
      /**
       * Used RF band.
       */
      rfBand?: string;
      /**
       * Main RF channel A of the main network. Valid numbers depend on used RF band.
       */
      rfChannelA?: number;
      /**
       * Same as above but second B channel. Used at RFPGM only.
       */
      rfChannelB?: number;
      /**
       * Main RF channel A of the optional subordinate network in case the node also plays a role of the coordinator of such network. Valid numbers depend on used RF band. Available for DPA<400.
       */
      rfSubChannelA?: number;
      /**
       * Same as above but second B channel.
       */
      rfSubChannelB?: number;
      /**
       * RF output power. Valid numbers 0-7.
       */
      txPower?: number;
      /**
       * RF signal filter. Valid numbers 0-64.
       */
      rxFilter?: number;
      /**
       * Timeout for receiving RF packets at LP mode at N device.
       */
      lpRxTimeout?: number;
      /**
       * A nonzero value specifies an alternative DPA service mode channel.
       */
      rfAltDsmChannel?: number;
      /**
       * If sets, then activates RFPGM invoking by TR module reset.
       */
      rfPgmEnableAfterReset?: boolean;
      /**
       * If sets, then terminates RFPGM automatically ~1 minute after reset.
       */
      rfPgmTerminateAfter1Min?: boolean;
      /**
       * If sets, then terminates RFPGM by dedicated pin of the TR module.
       */
      rfPgmTerminateMcuPin?: boolean;
      /**
       * If sets, then enables single or dual channel function.
       */
      rfPgmDualChannel?: boolean;
      /**
       * RFPGM receiving mode setting. If set, then LP (low power) Rx mode is used during RFPGM. Otherwise STD (standard) Rx mode is used.
       */
      rfPgmLpMode?: boolean;
      /**
       * Read only. Indicates that the last RFPGM has successfully been completed.
       */
      rfPgmIncorrectUpload?: boolean;
      /**
       * If set, then a Custom DPA handler is called in case of an event.
       */
      customDpaHandler?: boolean;
      /**
       * If set, then DP2P is enabled at [N].
       */
      dpaPeerToPeer?: boolean;
      /**
       * If set, then Node device can be controlled by a SPI or UART interface. Valid only in DPA version < 4.00
       */
      nodeDpaInterface?: boolean;
      /**
       * Baud rate of the UART interface if one is used.
       */
      uartBaudrate?: number;
      /**
       * If set, then DPA Autoexec is run at a later stage of the module boot time.
       */
      dpaAutoexec?: boolean;
      /**
       * If set, then the Node device does not route packets on the background.
       */
      routingOff?: boolean;
      /**
       * If set, then DPA IO Setup is run at an early stage of the module boot time.
       */
      ioSetup?: boolean;
      /**
       * If set, then device receives also peer-to-peer (non-networking) packets and raises PeerToPeer event.
       */
      peerToPeer?: boolean;
      /**
       * If set, then unbonded Node using default IQRF buttons never sleeps during the button bonding. From DPA v3.03
       */
      neverSleep?: boolean;
      /**
       * If the bit is set, then the [C] controls the STD+LP network; otherwise, it controls the STD network. The bit can only be changed if the network is empty (no [Ns] are bonded) otherwise the network will stop working. From DPA v4.00
       */
      stdAndLpNetwork?: boolean;
      /**
       * It sets access password. If the field is left completely empty (no characters filled), the default password (16x number 0x00) is used (the same as the default set from the factory.
       */
      accessPassword?: string;
      /**
       * It sets security user key. Enter a value up to 16 characters.
       */
      securityUserKey?: string;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
  };
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqmeshNetworkWriteTrConfResponse100 {
  /**
   * IQMESH Network management - Write TR configuration response.
   */
  mType: "iqmeshNetwork_WriteTrConf";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Returns following values, see its description.
     */
    rsp?: {
      /**
       * Device address to write the configuration to. Broadcast address is also allowed.
       */
      deviceAddr: number;
      /**
       * If sets, then configuration has been successfully written.
       */
      writeSuccess?: boolean;
      /**
       * Restart required, but not done yet.
       */
      restartNeeded?: boolean;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfBinaryoutputEnumerateRequest100 {
  /**
   * Standard peripheral Binary Output - Enumeration request.
   */
  mType: "iqrfBinaryoutput_Enumerate";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfBinaryoutputEnumerateResponse100 {
  /**
   * Standard peripheral Binary Output - Enumeration response.
   */
  mType: "iqrfBinaryoutput_Enumerate";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Number of implemented binary outputs.
         */
        binOuts?: number;
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfBinaryoutputSetOutputRequest100 {
  /**
   * Standard peripheral Binary Output - Set Output request.
   */
  mType: "iqrfBinaryoutput_SetOutput";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * Array of objects with the following fields.
         */
        binOuts?: {
          /**
           * Zero based index of the light to set.
           */
          index: number;
          /**
           * true to set ON state, false to set OFF state.
           */
          state: boolean;
          /**
           * Time in seconds. Allowed values are <1;127> or 60*<1;127>.
           */
          time?: number;
          [k: string]: any;
        }[];
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfBinaryoutputSetOutputResponse100 {
  /**
   * Standard peripheral Binary Output - Set Output request.
   */
  mType: "iqrfBinaryoutput_SetOutput";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Array of boolean true/false values specifying the previous state of each binary output. false is returned for unimplemented binary outputs.
         */
        prevVals?: boolean[];
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfDaliFrcRequest100 {
  /**
   * Standard peripheral DALI - FRC request.
   */
  mType: "iqrfDali_Frc";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * 2 bytes (16 bits) wide values, each representing one DALI command at the standard DALI format YAAAAAAS+DDDDDDDD.
         */
        command: number;
        /**
         * Array if integer values corresponding to the selected nodes. Use default value to select all nodes and use sleepAfterFrc parameter.
         */
        selectedNodes?: number[];
        /**
         * If set Extra result DPA message is sent and processed
         */
        getExtraResult?: boolean;
        /**
         * Sensors returns in extended format
         */
        extFormat?: boolean;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfDaliFrcResponse100 {
  /**
   * Standard peripheral DALI - FRC response.
   */
  mType: "iqrfDali_Frc";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Array of objects for every DALI answer. Object array index represent the node address (or index in case selectedNodes parameter was used). The object has the same fields as object at the return object of iqrf.DALI.SendCommands_Response.
         */
        answers: (
          | null
          | {
              /**
               * DALI status: See IQRF DALI standard for details.
               */
              status: number;
              /**
               * DALI value: See IQRF DALI standard for details.
               */
              value: number;
              [k: string]: any;
            }
          | {
              /**
               * Node address.
               */
              nAdr: number;
              /**
               * Arbitrary user defined meta data.
               */
              metaData?: {
                [k: string]: any;
              };
              answer: null | {
                /**
                 * DALI status: See IQRF DALI standard for details.
                 */
                status: number;
                /**
                 * DALI value: See IQRF DALI standard for details.
                 */
                value: number;
                [k: string]: any;
              };
              [k: string]: any;
            })[];
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfDaliSendCommandsRequest100 {
  /**
   * Standard peripheral DALI - Send DALI commands and returns answers synchronously.
   */
  mType: "iqrfDali_SendCommands";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * Array of 2 bytes (16 bits) wide values, each representing one DALI command at the standard DALI format YAAAAAAS+DDDDDDDD.
         */
        commands: number[];
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfDaliSendCommandsResponse100 {
  /**
   * Standard peripheral DALI - Send DALI commands and returns answers synchronously.
   */
  mType: "iqrfDali_SendCommands";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Returns array of objects for every DALI 2B command.
         */
        answers: {
          /**
           * DALI status: See IQRF DALI standard for details.
           */
          status: number;
          /**
           * DALI value: See IQRF DALI standard for details.
           */
          value: number;
          [k: string]: any;
        }[];
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfDaliSendCommandsAsyncRequest100 {
  /**
   * Standard peripheral DALI - Send DALI commands and return answer asynchronously.
   */
  mType: "iqrfDali_SendCommandsAsync";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * Array of 2 bytes (16 bits) wide values, each representing one DALI command at the standard DALI format YAAAAAAS+DDDDDDDD.
         */
        commands: number[];
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfDaliSendCommandsAsyncResponse100 {
  /**
   * Standard peripheral DALI - Send DALI commands and returns answers asynchronously.
   */
  mType: "iqrfDali_SendCommandsAsync";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorAddrInfoRequest100 {
  /**
   * Embedded peripheral Coordinator - Addressing Information request.
   */
  mType: "iqrfEmbedCoordinator_AddrInfo";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorAddrInfoResponse100 {
  /**
   * Embedded peripheral Coordinator - Addressing Information response.
   */
  mType: "iqrfEmbedCoordinator_AddrInfo";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Number of bonded network nodes.
         */
        devNr?: number;
        /**
         * Discovery ID of the network.
         */
        did?: number;
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorAuthorizeBondRequest100 {
  /**
   * Embedded peripheral Coordinator - Authorize Bond request.
   */
  mType: "iqrfEmbedCoordinator_AuthorizeBond";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * See Bond node request. If 0xFF is specified then the pre-bonded node is unbonded and then reset.
         */
        reqAddr?: number;
        /**
         * Module ID of the node to be authorized.
         */
        mid?: number;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorAuthorizeBondResponse100 {
  /**
   * Embedded peripheral Coordinator - Authorize Bond response.
   */
  mType: "iqrfEmbedCoordinator_AuthorizeBond";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorBackupRequest100 {
  /**
   * Embedded peripheral Coordinator - Backup request.
   */
  mType: "iqrfEmbedCoordinator_Backup";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * Index of the block of data.
         */
        index?: number;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorBackupResponse100 {
  /**
   * Embedded peripheral Coordinator - Backup response.
   */
  mType: "iqrfEmbedCoordinator_Backup";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * One block of the coordinator network info data.
         */
        networkData?: number[];
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorBondedDevicesRequest100 {
  /**
   * Embedded peripheral Coordinator - Get Bonded Devices request.
   */
  mType: "iqrfEmbedCoordinator_BondedDevices";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorBondedDevicesResponse100 {
  /**
   * Embedded peripheral Coordinator - Get Bonded Devices response.
   */
  mType: "iqrfEmbedCoordinator_BondedDevices";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Values corresponding to the addresses of the bonded devices
         */
        bondedDevices?: number[];
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorBondNodeRequest100 {
  /**
   * Embedded peripheral Coordinator - Bond Node request.
   */
  mType: "iqrfEmbedCoordinator_BondNode";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * A requested address for the bonded node. The address must not be used (bonded) yet. If this parameter equals to 0, then the 1st free address is assigned to the node.
         */
        reqAddr?: number;
        /**
         * See IQRF OS User's and Reference guides (remote bonding, function bondNewNode).
         */
        bondingMask?: number;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorBondNodeResponse100 {
  /**
   * Embedded peripheral Coordinator - Bond Node response.
   */
  mType: "iqrfEmbedCoordinator_BondNode";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Address of the node newly bonded to the network.
         */
        bondAddr?: number;
        /**
         * Number of bonded network nodes.
         */
        devNr?: number;
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorClearAllBondsRequest100 {
  /**
   * Embedded peripheral Coordinator - Clear All Bonds request.
   */
  mType: "iqrfEmbedCoordinator_ClearAllBonds";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorClearAllBondsResponse100 {
  /**
   * Embedded peripheral Coordinator - Clear All Bonds response.
   */
  mType: "iqrfEmbedCoordinator_ClearAllBonds";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorClearRemotelyBondedMidRequest100 {
  /**
   * Embedded peripheral Coordinator - Clear Remotely Bonded Module ID request.
   */
  mType: "iqrfEmbedCoordinator_ClearRemotelyBondedMid";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorClearRemotelyBondedMidResponse100 {
  /**
   * Embedded peripheral Coordinator - Clear Remotely Bonded Module ID response.
   */
  mType: "iqrfEmbedCoordinator_ClearRemotelyBondedMid";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorDiscoveredDevicesRequest100 {
  /**
   * Embedded peripheral Coordinator - Get Discovered Nodes request.
   */
  mType: "iqrfEmbedCoordinator_DiscoveredDevices";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorDiscoveredDevicesResponse100 {
  /**
   * Embedded peripheral Coordinator - Get Bonded Nodes response.
   */
  mType: "iqrfEmbedCoordinator_DiscoveredDevices";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Array indicating discovered nodes (addresses).
         */
        discoveredDevices?: number[];
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorDiscoveryRequest100 {
  /**
   * Embedded peripheral Coordinator - Discovery request.
   */
  mType: "iqrfEmbedCoordinator_Discovery";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * TX Power used for discovery.
         */
        txPower?: number;
        /**
         * Nonzero value specifies maxItems node address to be part of the discovery process.
         */
        maxAddr?: number;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorDiscoveryResponse100 {
  /**
   * Embedded peripheral Coordinator - Discovery response.
   */
  mType: "iqrfEmbedCoordinator_Discovery";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Number of discovered nodes.
         */
        discNr?: number;
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorDiscoveryDataRequest100 {
  /**
   * Embedded peripheral Coordinator - Discovery Data request.
   */
  mType: "iqrfEmbedCoordinator_DiscoveryData";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * Address of the discovery data to read.
         */
        address?: number;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorDiscoveryDataResponse100 {
  /**
   * Embedded peripheral Coordinator - Discovery Data response.
   */
  mType: "iqrfEmbedCoordinator_DiscoveryData";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Array of bytes with discovery data.
         */
        discoveryData?: number[];
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorEnableRemoteBondingRequest100 {
  /**
   * Embedded peripheral Coordinator - Enable Remote Bonding request.
   */
  mType: "iqrfEmbedCoordinator_EnableRemoteBonding";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * See IQRF OS User's and Reference guides (remote bonding, function bondNewNode).
         */
        bondingMask?: number;
        /**
         * Bit 0 enables remote bonding mode. If enabled then previously bonded nodes are forgotten. Bit 1-7 reserved
         */
        control?: number;
        /**
         * Optional data that can be used at Reset Custom DPA Handler event.
         */
        userData?: number[];
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorEnableRemoteBondingResponse100 {
  /**
   * Embedded peripheral Coordinator - Enable Remote Bonding request.
   */
  mType: "iqrfEmbedCoordinator_EnableRemoteBonding";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorReadRemotelyBondedMidRequest100 {
  /**
   * Embedded peripheral Coordinator - Read Remotely Bonded Module ID request.
   */
  mType: "iqrfEmbedCoordinator_ReadRemotelyBondedMid";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorReadRemotelyBondedMidResponse100 {
  /**
   * Embedded peripheral Coordinator - Read Remotely Bonded Module ID response.
   */
  mType: "iqrfEmbedCoordinator_ReadRemotelyBondedMid";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Js driver response structure for given a command.
         */
        prebondedNodes?: {
          /**
           * Module ID of the remotely pre-bonded node. It can be used later for bonding authorization later.
           */
          mid: number;
          /**
           * Optional bonding user data specified at Reset Custom DPA Handler event.
           */
          userData: number[];
          [k: string]: any;
        }[];
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorRebondNodeRequest100 {
  /**
   * Embedded peripheral Coordinator - Rebond request.
   */
  mType: "iqrfEmbedCoordinator_RebondNode";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * Address of the node to be re-bonded.
         */
        bondAddr?: number;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorRebondNodeResponse100 {
  /**
   * Embedded peripheral Coordinator - Rebond request.
   */
  mType: "iqrfEmbedCoordinator_RebondNode";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Number of bonded nodes.
         */
        devNr?: number;
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorRemoveBondRequest100 {
  /**
   * Embedded peripheral Coordinator - Remove Bond request.
   */
  mType: "iqrfEmbedCoordinator_RemoveBond";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * Address of the node to be removed.
         */
        bondAddr?: number;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorRemoveBondResponse100 {
  /**
   * Embedded peripheral Coordinator - Remove Bond response.
   */
  mType: "iqrfEmbedCoordinator_RemoveBond";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Number of bonded nodes.
         */
        devNr?: number;
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorRestoreRequest100 {
  /**
   * Embedded peripheral Coordinator - Restore request.
   */
  mType: "iqrfEmbedCoordinator_Restore";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * One block of the coordinator network info data previously obtained by a backup command.
         */
        networkData?: number[];
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorRestoreResponse100 {
  /**
   * Embedded peripheral Coordinator - Restore response.
   */
  mType: "iqrfEmbedCoordinator_Restore";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorSetDpaParamsRequest100 {
  /**
   * Embedded peripheral Coordinator - Set Dpa Params request.
   */
  mType: "iqrfEmbedCoordinator_SetDpaParams";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * Set DPA parameter.
         */
        dpaParam?: number;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorSetDpaParamsResponse100 {
  /**
   * Embedded peripheral Coordinator - Set Dpa Params response.
   */
  mType: "iqrfEmbedCoordinator_SetDpaParams";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Previously set DPA parameter.
         */
        prevDpaParam?: number;
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorSetHopsRequest100 {
  /**
   * Embedded peripheral Coordinator - Set Hops request.
   */
  mType: "iqrfEmbedCoordinator_SetHops";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * Allows the specifying fixed number of hops used to send the DPA request or to specify an optimization algorithm to compute a integer of hops.
         */
        requestHops?: number;
        /**
         * Allows the specifying fixed number of hops used to send the DPA response or to specify an optimization algorithm to compute a integer of hops.
         */
        responseHops?: number;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorSetHopsResponse100 {
  /**
   * Embedded peripheral Coordinator - Set Hops response.
   */
  mType: "iqrfEmbedCoordinator_SetHops";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Allows the specifying fixed number of hops used to send the DPA request or to specify an optimization algorithm to compute a integer of hops.
         */
        requestHops?: number;
        /**
         * Allows the specifying fixed number of hops used to send the DPA response or to specify an optimization algorithm to compute a integer of hops.
         */
        responseHops?: number;
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorSetMidRequest100 {
  /**
   * Embedded peripheral Coordinator - Set MID value request.
   */
  mType: "iqrfEmbedCoordinator_SetMID";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * Address of the node to set the MID to.
         */
        bondAddr?: number;
        /**
         * MID to write to the Coordinator's database.
         */
        mid?: number;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorSetMidResponse100 {
  /**
   * Embedded peripheral Coordinator - Set MID value response.
   */
  mType: "iqrfEmbedCoordinator_SetMID";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorSmartConnectRequest100 {
  /**
   * Embedded peripheral Coordinator - Smart Connect request.
   */
  mType: "iqrfEmbedCoordinator_SmartConnect";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * A requested address for the bonded node. The address must not be used (bonded) yet. If this parameter equals to 0, then the 1st free address is assigned to the node.
         */
        reqAddr?: number;
        /**
         * Maximum number of FRCs used to test whether the Node was successfully bonded. If value is 0, then no test is performed and the command always succeeds.
         */
        bondingTestRetries?: number;
        /**
         * Individual Bonding Key of the Node to bond.
         */
        ibk?: number[];
        /**
         * MID of the Node to bond.
         */
        mid?: number;
        /**
         * Virtual device address. Must equal to 0xFF if not used.
         */
        virtualDeviceAddress?: number;
        /**
         * Optional data passed to the bonded node.
         */
        userData?: number[];
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedCoordinatorSmartConnectResponse100 {
  /**
   * Embedded peripheral Coordinator - Smart Connect response.
   */
  mType: "iqrfEmbedCoordinator_SmartConnect";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Address of the node newly bonded to the network.
         */
        bondAddr?: number;
        /**
         * Number of bonded network nodes.
         */
        devNr?: number;
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedFrcExtraResultRequest100 {
  /**
   * Embedded peripheral FRC - Extra Result request.
   */
  mType: "iqrfEmbedFrc_ExtraResult";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedFrcExtraResultResponse100 {
  /**
   * Embedded peripheral FRC - Extra Result response.
   */
  mType: "iqrfEmbedFrc_ExtraResult";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * FRC data.
         */
        frcData?: number[];
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mcat) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mcat) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedFrcSendRequest100 {
  /**
   * Embedded peripheral FRC - Send request.
   */
  mType: "iqrfEmbedFrc_Send";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * Specifies data to be collected.
         */
        frcCommand?: number;
        /**
         * User data.
         */
        userData?: number[];
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedFrcSendResponse100 {
  /**
   * Embedded peripheral FRC - Send response.
   */
  mType: "iqrfEmbedFrc_Send";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * FRC status.
         */
        status?: number;
        /**
         * FRC data.
         */
        frcData?: number[];
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mcat) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mcat) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedFrcSendSelectiveRequest100 {
  /**
   * Embedded peripheral FRC - Send Selective request.
   */
  mType: "iqrfEmbedFrc_SendSelective";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * Specifies data to be collected.
         */
        frcCommand?: number;
        /**
         * Selected nodes 1 ... 30.
         */
        selectedNodes?: number[];
        /**
         * User data.
         */
        userData?: number[];
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedFrcSendSelectiveResponse100 {
  /**
   * Embedded peripheral FRC - Send Selective response.
   */
  mType: "iqrfEmbedFrc_SendSelective";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * FRC status.
         */
        status?: number;
        /**
         * FRC data.
         */
        frcData?: number[];
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mcat) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mcat) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedFrcSetParamsRequest100 {
  /**
   * Embedded peripheral FRC - Set Params request.
   */
  mType: "iqrfEmbedFrc_SetParams";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      param: {
        /**
         * Maximum time reserved for preparing return FRC value.
         */
        frcResponseTime?: number;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfEmbedFrcSetParamsResponse100 {
  /**
   * Embedded peripheral FRC - Set Params response.
   */
  mType: "iqrfEmbedFrc_SetParams";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      result?: {
        /**
         * Previous FRC response time.
         */
        frcResponseTime?: number;
        [k: string]: any;
      };
      /**
       * Error description from JS drivers.
       */
      errorStr?: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mcat) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mcat) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfRawRequest100 {
  /**
   * Message type for Raw communication.
   */
  mType: "iqrfRaw";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response
     */
    timeout?: number;
    req: {
      /**
       * Binary buffer with DPA request
       */
      rData: string;
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfRawResponse100 {
  /**
   * Message type for Raw communication.
   */
  mType: "iqrfRaw";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response
     */
    timeout?: number;
    rsp: {
      /**
       * Binary buffer with DPA response
       */
      rData: string;
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfRawHdpRequest100 {
  /**
   * Message type for Raw Hdp communication.
   */
  mType: "iqrfRawHdp";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    req: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Peripheral integer.
       */
      pNum: number;
      /**
       * Peripheral command.
       */
      pCmd: number;
      /**
       * Hardware profile identification.
       */
      hwpId?: number;
      /**
       * Binary buffer with DPA request data.
       */
      pData?: number[];
      [k: string]: any;
    };
    /**
     * Flag that includes additional parameters in the response.
     */
    returnVerbose?: boolean;
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IqrfRawHdpResponse100 {
  /**
   * Message type for Raw Hdp communication.
   */
  mType: "iqrfRawHdp";
  data: {
    /**
     * Message identification for binding request with response.
     */
    msgId: string;
    /**
     * Timeout to wait for IQRF DPA response.
     */
    timeout?: number;
    rsp: {
      /**
       * Network device address.
       */
      nAdr: number;
      /**
       * Peripheral number.
       */
      pNum: number;
      /**
       * Peripheral command.
       */
      pCmd: number;
      /**
       * Hardware profile identification.
       */
      hwpId: number;
      /**
       * DPA error code.
       */
      rCode: number;
      /**
       * DPA value.
       */
      dpaVal: number;
      /**
       * Binary buffer with DPA response data.
       */
      pData?: number[];
      [k: string]: any;
    };
    /**
     * Returns array of objects req-cnf-rsp, see its description.
     */
    raw?: {
      /**
       * Binary buffer with DPA request.
       */
      request: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      requestTs: string;
      /**
       * Binary buffer with DPA confirmation.
       */
      confirmation: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      confirmationTs: string;
      /**
       * Binary buffer with DPA response.
       */
      response: string;
      /**
       * YYYY-MM-DDTHH:MM:SS.SSS±HH:MM
       */
      responseTs: string;
      [k: string]: any;
    }[];
    /**
     * IQRF GW daemon instance identification.
     */
    insId?: string;
    /**
     * IQRF GW daemon API (general or mType) status.
     */
    status: number;
    /**
     * IQRF GW daemon API (general or mType) status in string form.
     */
    statusStr?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
